terraform -chdir=00_becquerel apply
terraform -chdir=01_tailnet apply
Confirm headscale is running:
  ssh root@becquerel.skaia.cloud headscale users list

Join coloris to tailscale:
  terraform -chdir=01_tailnet output -json workstation_pre_auth_keys | jq -r .coloris | sudo tee /etc/skaia-headscale-auth-key
  sudo systemctl stop tailscaled tailscaled-autoconnect
  sudo systemctl start tailscaled tailscaled-autoconnect
  ssh root@becquerel.skaia.cloud headscale nodes list

terraform -chdir=02_talos_image apply

terraform -chdir=03_talos_linodes apply

Re-image bare metal nodes:
  Get script URL:
    terraform -chdir=02_talos_image output bare_metal_script_url
  Boot NixOS from USB
  curl -O URL
  chmod +x ./install.py
  ./install.py --target=/dev/nvme0n1 --flavour=1.9.5

Confirm Talos api up on all nodes:
  curl https://192.168.178.154:50000
  curl https://192.168.178.164:50000
  curl https://peixes.skaia.cloud:50000

If this is a rebuild, ensure node(s) aren't already registered to headscale:
  ssh root@becquerel.skaia.cloud headscale nodes list
  ssh root@becquerel.skaia.cloud headscale nodes delete -i <id>

First Talos apply (configures tailscale):
  terraform -chdir=04_talos apply
  If this is a rebuild, re-issue tailscale preauthkeys with e.g. -replace='headscale_pre_auth_key.main["pyrope"]'

Confirm nodes registered to headscale:
  ssh root@becquerel.skaia.cloud headscale nodes list
  tailscale ping vantas
  tailscale ping ampora
  tailscale ping peixes

Comment out the firewall rule allowing direct (non-tailscale) access to the Talos api server
terraform -chdir=03_talos_linodes apply

Second Talos apply (changes the endpoints from bootstrap IPs to tailscale IPs, should bring up kube-apiservers):
  terraform -chdir=04_talos apply

terraform -chdir=04_talos output -raw talosconfig > talosconfig
terraform -chdir=04_talos output -raw kubeconfig > kubeconfig
Confirm nodes all present (not Ready yet though):
  kubectl --kubeconfig=kubeconfig get node

terraform -chdir=05_kube_system apply
Confirm nodes all Ready:
  kubectl --kubeconfig=kubeconfig get node
Confirm coredns gets scheduled:
  kubectl --kubeconfig=kubeconfig -n kube-system get pod
Confirm pod & service routes are advertised:
  ssh root@becquerel.skaia.cloud headscale routes list






To upgrade Talos, re-image nodes from scratch.
Do not use `talosctl upgrade`!!! This will blow away OSDs located on the same block device as Talos.




Checking if connections are being dropped by firewall rules:
  talosctl logs ext-tailscale | grep Drop:



To re-image Raspberry Pi 3 SD card:
  url=$(terraform -chdir=02_talos_image output -json rpi_image | jq -r '.["1.10.4-rpi"]')
  wget -O metal-arm64.raw.xz "$url"
  unxz -c metal-arm64.raw.xz | sudo dd of=/dev/sdc bs=4M
  sudo gdisk /dev/sdc
    r (enter recovery/transformation menu)
    p (list the GPT)
    h (begin making a hybrid MBR)
      1 (the number of the partition that contains bootcode.bin - this should be labelled "EFI")
      n (no, don't place EFI GPT partition first in MBR)
      c (set partition type to 'W95 FAT32 (LBA)')
      n (no, don't set the bootable flag)
      y (yes, protect more partitions)
      hit return (use the default partition type code)
    o (list the newly created MBR)
    w (write changes to disk and exit)
      y (yes, move the secondary header to the end of the disk)
      y (yes, proceed)
  sudo mount /dev/sdc1 /mnt
  sudo sed -i -e "s/BOOT_UART=0/BOOT_UART=1/" /mnt/bootcode.bin
  sudo umount /mnt
  sudo sync

The ROM firmware requires bootcode.bin to be the partition 1 of the MBR,
which much have partition type c (W95 FAT32).
bootcode.bin is okay with this layout, since it's able to find config.txt & start.elf.
Not sure if start.elf is okay with this layout though?
Next: try creating cmdline.txt and see if start.elf still says it can't find it.
